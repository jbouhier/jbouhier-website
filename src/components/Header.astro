---
import logo from '../assets/logo.png';
import { ClientSocialIcons } from './ClientSocialIcons';
import type { SocialIcon } from './SocialIcons';

interface SocialLinks {
  x?: string;
  bluesky?: string;
  youtube?: string;
  linkedin?: string;
}

interface Props {
  title?: string;
  social?: SocialLinks;
}

const { 
  title = 'Not a cat',
  social = {}
} = Astro.props as Props;

// Social media icons with their respective react-icons
const socialIcons: SocialIcon[] = [
  {
    name: 'x',
    href: social.x || '#',
    icon: 'x',
    color: 'hover:text-gray-800',
    title: 'X (Twitter)'
  },
  {
    name: 'bluesky',
    href: social.bluesky || '#',
    icon: 'bluesky',
    color: 'hover:text-blue-500',
    title: 'Bluesky'
  },
  {
    name: 'youtube',
    href: social.youtube || '#',
    icon: 'youtube',
    color: 'hover:text-red-600',
    title: 'YouTube'
  },
  {
    name: 'linkedin',
    href: social.linkedin || '#',
    icon: 'linkedin',
    color: 'hover:text-blue-700',
    title: 'LinkedIn'
  }
].filter((icon): icon is SocialIcon => !!icon.href && icon.href !== '#');


---

<header class="fixed top-0 left-0 w-full z-50 bg-pink-50/80 backdrop-blur-sm border-b border-pink-100">
  <div class="max-w-6xl mx-auto px-6">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <div class="flex items-center">
        <a 
          href="/" 
          class="flex items-center space-x-3 group"
          aria-label="Home"
        >
          <div class="transition-all duration-300 ease-in-out group-hover:scale-110 group-active:scale-95">
            <img 
              src={logo.src} 
              alt="Logo" 
              width="32"
              height="32"
              class="h-8 w-auto"
              loading="eager"
            />
          </div>
          <span class="text-2xl font-bold text-gray-900 group-hover:text-pink-600 transition-colors">
            {title}
          </span>
        </a>
      </div>
      
      <!-- Social Media Links - Desktop -->
      <nav class="hidden md:flex items-center space-x-4">
        <ClientSocialIcons icons={socialIcons} />
      </nav>
      
      <!-- Mobile menu button -->
      <button 
        class="md:hidden p-2 -mr-2 text-gray-700 hover:text-pink-600 transition-colors"
        id="mobile-menu-button"
        aria-label="Toggle menu"
        aria-expanded="false"
      >
        <svg 
          class="w-6 h-6" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
          id="menu-icon"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
        <svg 
          class="w-6 h-6 hidden" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
          id="close-icon"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Mobile menu -->
    <div 
      class="hidden md:hidden py-4 border-t border-pink-100 bg-white/95"
      id="mobile-menu"
    >
      <div class="flex flex-col space-y-6 items-center">
        <div class="flex justify-center space-x-6">
          <ClientSocialIcons icons={socialIcons} />
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
      // Set initial state
      mobileMenuButton.setAttribute('aria-expanded', 'false');
      
      // Toggle menu function
      const toggleMenu = () => {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        mobileMenuButton.setAttribute('aria-expanded', String(!isExpanded));
        mobileMenu.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
      };
      
      // Toggle menu on button click
      mobileMenuButton.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleMenu();
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as Node;
        if (mobileMenu && !mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        }
      });
      
      // Close menu when clicking on a link
      const navLinks = mobileMenu.querySelectorAll('a');
      navLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        });
      });
    }

    // Header scroll effect
    const header = document.getElementById('header');
    if (header) {
      const updateHeader = (): void => {
        if (window.scrollY > 50) {
          header.classList.add('shadow-md', 'py-2');
        } else {
          header.classList.remove('shadow-md', 'py-2');
        }
      };
      
      // Initial check
      updateHeader();
      
      // Add scroll event listener
      window.addEventListener('scroll', updateHeader);
      
      // Cleanup function (though in a real SPA, you'd want to handle this differently)
      return () => {
        window.removeEventListener('scroll', updateHeader);
      };
    }
  });
</script>
